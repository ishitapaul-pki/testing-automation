# This is a basic workflow to help you get started with Actions

name: Testing Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with: 
              persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
              fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.1.1
        with:
          dotnet-version: '6.0'
        
      - name: Setup NuGet.exe for use with actions
        # You may pin to the exact commit or the version.
        # uses: NuGet/setup-nuget@795d81930e6f583d6dbe984a5634efe5de9e54a7
        uses: nuget/setup-nuget@main
        with:
          nuget-version: latest
        
      - name: Restore NuGet packages
        run: nuget restore C-Sharp-master\C-Sharp.sln
        
      - name: Build the Solution
        run: msbuild C-Sharp-master\C-Sharp.sln
        
      - name: Compressing folder
        id: zip_hash
        run: |
          $Parameters = @{
              Path     = "C-Sharp-master\Utilities\bin\Debug\net5.0"
              NewName  = "BuildResult"
              PassThru = $true
          }
          $Build_Directory = (Rename-Item @Parameters).FullName
          $Parameters = @{
              Path             = $Build_Directory
              DestinationPath  = "BuildResult.zip"
              CompressionLevel = "Optimal"
          }    
          #Compress-Archive @Parameters
          #$zip_hash = (Get-FileHash -Path BuildResult.zip -Algorithm SHA256).Hash
          #Write-Host -Object "BuildResult.zip SHA256 hash: $((Get-FileHash -Path BuildResult.zip -Algorithm SHA256).Hash)"
          #echo "::set-output name=zip_hash::$zip_hash"
          
                    
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
           name: BuildResult.zip
           path: C-Sharp-master
           
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with: 
              name: BuildResult.zip
              path: C-Sharp-master\BuildResult
        env:
          GITHUB_TOKEN: ${{ github.token }} 
          
  scan:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with: 
              name: BuildResult.zip
              path: C-Sharp-master\BuildResult
        env:
          GITHUB_TOKEN: ${{ github.token }}    
        
      - name: Veracode Upload And Scan
        # You may pin to the exact commit or the version.
        # uses: veracode/veracode-uploadandscan-action@35794dab9fbcd28fac19e44963f80646b27f4a7f
        uses: veracode/veracode-uploadandscan-action@0.2.4
        with:
          # appname
          appname: "${{ github.repository }}"
          # filepath
          filepath: "D:/a/Testing-for-automation/Testing-for-automation/C-Sharp-master/BuildResult/BuildResult.zip"
          # version
          version: "${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}"
          # vid
          vid: "$vid"
          # vkey
          vkey: "$vkey"
          # true or false
          sandboxname: "viacord_myaccount"
          # wait X minutes for the scan to complete
          include: "*.dll"
          # teams
          teams: "Viacord"
          # automatically delete the current scan if there are any errors when uploading files or starting the scan
          deleteincompletescan: false
          # specify version of the Java API Wrapper; default is latest
          #javawrapperversion: "v22.9.10.3"
        env:
          vid: ${{ secrets.VERACODE_ID }}
          vkey: ${{ secrets.VERACODE_SECRET }}
