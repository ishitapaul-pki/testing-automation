# This is a basic workflow to help you get started with Actions

name: Testing Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with: 
              persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
              fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.1.1
        with:
          dotnet-version: '6.0'
        
      - name: Setup NuGet.exe for use with actions
        # You may pin to the exact commit or the version.
        # uses: NuGet/setup-nuget@795d81930e6f583d6dbe984a5634efe5de9e54a7
        uses: nuget/setup-nuget@main
        with:
          nuget-version: latest
        
      - name: Restore NuGet packages
        run: nuget restore C-Sharp-master\C-Sharp.sln
        
      - name: Build the Solution
        run: msbuild C-Sharp-master\C-Sharp.sln
        
      - name: Compressing folder
        id: zip_hash
        run: |
          $Parameters = @{
              Path     = "C-Sharp-master\Utilities\bin\Debug\net5.0"
              NewName  = "BuildResult"
              PassThru = $true
          }
          $Build_Directory = (Rename-Item @Parameters).FullName
          $Parameters = @{
              Path             = $Build_Directory
              DestinationPath  = "BuildResult.zip"
              CompressionLevel = "Optimal"
          }    
          Compress-Archive @Parameters
          $zip_hash = (Get-FileHash -Path BuildResult.zip -Algorithm SHA256).Hash
          Write-Host -Object "BuildResult.zip SHA256 hash: $((Get-FileHash -Path BuildResult.zip -Algorithm SHA256).Hash)"
          echo "::set-output name=zip_hash::$zip_hash"
          
      - name: ReleaseNotesTemplate
        id: read_release
        run: |
          $Parameters = @{
            Uri             = "https://api.github.com/repos/ishitapaul-pki/testing-automation/releases"
            UseBasicParsing = $true
            Verbose         = $true
          }
          $Penultimate = (Invoke-RestMethod @Parameters).tag_name | Select-Object -Index 1
          $html_url = ((irm "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs").jobs | Where-Object -FilterScript {$_.run_id -eq "${{ github.run_id }}"}).html_url
          # https://en.wikipedia.org/wiki/Percent-encoding
          $Release = (Get-Content -Path ReleaseNotesTemplate.md -Encoding utf8 -Raw).replace("%", "%25").replace("`n", "%0A").replace("`r", "%0D").replace("NewVersion", "${{ github.ref_name }}").replace("OldVersion", $Penultimate).replace("CurrentDate", $(Get-Date -f "dd.MM.yyyy")).replace("html_url", $html_url).replace("SHA256_hash", "${{ steps.zip_hash.outputs.zip_hash }}")
          # https://trstringer.com/github-actions-multiline-strings/
          echo "::set-output name=RELEASE_BODY::$Release"
                     
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
           name: BuildResult.zip
           path: C-Sharp-master
           
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with: 
              name: BuildResult.zip
              path: C-Sharp-master

      
